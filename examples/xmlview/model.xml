<?xml version="1.0" encoding="utf-8"?>
<!--
xview xml guide.

overall, xview is a way to define views in xml, create
them at runtime, and decouple data from the view declarations. This makes 
it easy to export data from a mysql database, without having to worry
about the surrounding view declarations and structure.
-->
<model>
	<xmlviews>
		<!--
		#Containers.
		
		most basic way to define a view.
		this will define a container view only,
		because the "libraryName" attribute is
		not defined.
		
		At any point, you can call:
		myXViewManager.getView("viewID");
		And it will build, and return the view
		back to you.
		
		For this case: myXViewManager.getView("Test0");
		-->
		<view id="Test0" />
		
		<!--
		#Views from the library.
		
		Another way to define a view. because
		the "libraryName" attribute is defined,
		the view comes from a clip in the library.
		
		The "attributes", and "data" nodes get passed
		to the method "initFromXML" after the
		view is instantiated. The attributes and data
		nodes are always optional.
		-->
		<view id="Test1" libraryName="Test1View">
			<attributes x="90" y="80" />
			<data>
				<content><![CDATA[word up]]></content>
			</data>
		</view>
		
		<!--
		#Decoupled data node.
		
		View is created the same way as Test1, but in
		this case, the data node references another
		node which can be defined elsewhere, so it
		decouples data definitions from surrounding
		view definitions.
		-->
		<view id="Test1WithXData" libraryName="Test1View">
			<attributes x="90" y="80" />
			<data id="testdata" />
		</view>
		
		<!--
		#Anything can be defined in the attributes node.
		
		View is created same way as Test1, but in this
		example, it illustrates that you can define 
		the attributes node however you want, because
		it get's passed to the initFromXML node, which
		requires you to implement your own logic, and
		react to the "attributes" node.
		-->
		<view id="Test2WithPropset" libraryName="Test2View">
			<attributes propset="test" />
		</view>
		
		<!--
		#Attributes can be defined however you see fit.
		
		This example illustrates the "attributes" node again,
		but this time it's a node that contains other
		nodes. Again, you can define attributes however you want
		because it just get's passed to your implementing view.
		-->
		<view id="Test2WithFullAttributes" libraryName="Test2View">
			<attributes>
				<someCustomAttribute></someCustomAttribute>
			</attributes>
		</view>
		
		<!--
		#Recursive and nesting views.
		
		This example illustrates recursive view creation.
		Because there are nested "view" nodes, those
		views are created first, and added as a child
		to the outer view.
		
		For this example, view creation is in this order: v1,v2,Test2
		Adding the sub views as children is in this order: Test2.addChild(v1),Test2.addChild(v2).
		
		In this example, the "v2" view, has an "fromID" attribute,
		which references another view from somewhere else. Think
		of it as an "include." It literally uses the view it's
		referencing. The ony attribute is supports is the "name"
		attribute, like in the example below.
		
		After recursive view creation is complete, it
		calls "creationComplete()" on the outer view.
		So in this case: Test2.creationComplete().
		
		Recursive view creation always creates the inner
		most views, and works outwards until it reaches
		it's containing view. It recurses to any number of
		nested views.
		-->
		<view id="Test2" libraryName="Test2View">
			<attributes x="0" y="0" />
			<view libraryName="Test3View" id='v1' name="testNameOut">
				<attributes x="100" y="100" />
			</view>
			<view fromID="Test1" id="v2" name="testAnotherName" />
		</view>
		
		<!--
		Another example, illustrating all things above.
		In this particular example. The outermost view
		is only a container, which will contain v3 and v4.
		
		This example illustrates one additional feature.
		If an inner node has a "name" attribute, the outer
		view will define an instance variable that is a reference
		to that "inner" view, or child.
		-->
		<view id="Test3">
			<attributes x="0" y="0" />
			<view libraryName="Test1View" id='v3' name="testNameOut">
				<attributes x="90" y="80" />
				<view id='v3' libraryName="Test2View" name="testAnotherName">
					<attributes x="5" y="5" />
				</view>
			</view>
		</view>
	</xmlviews>
	
	<xmldata>
		<data id="testdata">
			<content><![CDATA[hello world]]></content>
		</data>
	</xmldata>
	
	<properties>
		<propset id="test">
			<alpha>.4</alpha>
			<xywh x="10" y="10" width="100" height="100" />
		</propset>
	</properties>
</model>